version: '3.8'

# good to specify the project name for a more consistent resulting environment. For example, network names
# are prefixed by the compose file's project name https://docs.docker.com/compose/how-tos/networking/
name: iidi

volumes:
  on-fhir-db:
    driver: local
  bc-fhir-db:
    driver: local

networks:
  host-loopback:
    driver: bridge
    driver_opts:
      # the default docker bridge driver behaviour is to bind exposed ports on 0.0.0.0, making them accessible
      # from the local network. Not good, unless you're on a known-safe network (ha) and specifically want to
      # serve dev traffic from other local devices (e.g. testing on mobile devices).
      # Configuring this network to bind on loopback instead, so that only incoming traffic from the host machine
      # can reach our containers on their dev ports
      com.docker.network.bridge.host_binding_ipv4: '127.0.0.1'
  gateway:
    driver: bridge
    internal: true
  on-fhir-db:
    # If/when access is needed, run docker compose with a shell attached to the db cluster directly, don't open to host network
    driver: bridge
    internal: true
  on-internal:
    driver: bridge
    internal: true
  bc-fhir-db:
    # If/when access is needed, run docker compose with a shell attached to the db cluster directly, don't open to host network
    driver: bridge
    internal: true
  bc-internal:
    driver: bridge
    internal: true
  federal-internal:
    driver: bridge
    internal: true

configs:
  gateway.default.conf:
    # Configure this to mock the behaviour of the /k8s cluster's gateway configuration
    # Note: double $'s (`$$`) below are escaped single $'s, to avoid docker compose variable interpolation
    content: |
      server {
          location /on/fhir/ {
              # set proxy headers
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
              proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $$scheme;
              
              # WebSocket support
              proxy_http_version 1.1;
              proxy_set_header Upgrade $$http_upgrade;
              proxy_set_header Connection "upgrade";

              proxy_pass http://on-fhir:8080/fhir/;
          }
          location /on/aggregator/ {
              # set proxy headers
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
              proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $$scheme;
              
              # WebSocket support
              proxy_http_version 1.1;
              proxy_set_header Upgrade $$http_upgrade;
              proxy_set_header Connection "upgrade";

              proxy_pass http://on-aggregator:5000/;
          }
          location /on/browser/ {
              # set proxy headers
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
              proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $$scheme;
              
              # WebSocket support
              proxy_http_version 1.1;
              proxy_set_header Upgrade $$http_upgrade;
              proxy_set_header Connection "upgrade";

              # fix relative paths in returned HTML/JS/CSS
              # necessary for the patient browser as it doesn't let us directly configure a server root like the fhir servers do
              sub_filter_once off; sub_filter_types *;
              sub_filter '/assets' '/on/browser/assets';
              sub_filter '/images' '/on/browser/images';
              proxy_pass http://on-patient-browser:80/;
          }
          location /on/inbound/ {
              # set proxy headers
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
              proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $$scheme;
              
              # WebSocket support
              proxy_http_version 1.1;
              proxy_set_header Upgrade $$http_upgrade;
              proxy_set_header Connection "upgrade";

              proxy_pass http://on-transfer-inbound:3001/;
          }
          location /on/outbound/ {
              # set proxy headers
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
              proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $$scheme;
              
              # WebSocket support
              proxy_http_version 1.1;
              proxy_set_header Upgrade $$http_upgrade;
              proxy_set_header Connection "upgrade";

              proxy_pass http://on-transfer-outbound:3002/;
          }

          location /bc/fhir/ {
              # set proxy headers
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
              proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $$scheme;
              
              # WebSocket support
              proxy_http_version 1.1;
              proxy_set_header Upgrade $$http_upgrade;
              proxy_set_header Connection "upgrade";

              proxy_pass http://bc-fhir:8080/fhir/;
          }
          location /bc/aggregator/ {
              # set proxy headers
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
              proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $$scheme;
              
              # WebSocket support
              proxy_http_version 1.1;
              proxy_set_header Upgrade $$http_upgrade;
              proxy_set_header Connection "upgrade";

              proxy_pass http://bc-aggregator:5000/;
          }
          location /bc/browser/ {
              # set proxy headers
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
              proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $$scheme;
              
              # WebSocket support
              proxy_http_version 1.1;
              proxy_set_header Upgrade $$http_upgrade;
              proxy_set_header Connection "upgrade";

              # fix relative paths in returned HTML/JS/CSS
              # necessary for the patient browser as it doesn't let us directly configure a server root like the fhir servers do
              sub_filter_once off; sub_filter_types *;
              sub_filter '/assets' '/bc/browser/assets';
              sub_filter '/images' '/bc/browser/images';
              proxy_pass http://bc-patient-browser:80/;
          }
          location /bc/inbound/ {
              # set proxy headers
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
              proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $$scheme;
              
              # WebSocket support
              proxy_http_version 1.1;
              proxy_set_header Upgrade $$http_upgrade;
              proxy_set_header Connection "upgrade";

              proxy_pass http://bc-transfer-inbound:3003/;
          }
          location /bc/outbound/ {
              # set proxy headers
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
              proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $$scheme;
              
              # WebSocket support
              proxy_http_version 1.1;
              proxy_set_header Upgrade $$http_upgrade;
              proxy_set_header Connection "upgrade";

              proxy_pass http://bc-transfer-outbound:3004/;
          }

          location /fed/federator/ {
              # set proxy headers
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
              proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $$scheme;
              
              # WebSocket support
              proxy_http_version 1.1;
              proxy_set_header Upgrade $$http_upgrade;
              proxy_set_header Connection "upgrade";

              proxy_pass http://federator:3000/;
          }
      }
  hapi:
    file: ./hapi-dev.application.yaml

services:
  gateway:
    image: nginx:1.27.3
    tty: ${DOCKER_TTY:-true}
    restart: always
    networks:
      - gateway
      - host-loopback
    ports:
      - 8080:80
    configs:
      - source: gateway.default.conf
        target: /etc/nginx/conf.d/default.conf

  on-fhir-db: &fhir-db-service
    image: postgres:14.11-alpine
    tty: ${DOCKER_TTY:-true}
    restart: always
    networks:
      - on-fhir-db
    ports:
      - 5432:5432
    volumes:
      - on-fhir-db:/var/lib/postgresql/data
    environment: &fhir-db-env
      POSTGRES_DB: hapi-fhir-db
      POSTGRES_USER: hapi-fhir-db
      POSTGRES_PASSWORD: local-dev-value
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U hapi-fhir-db -d hapi-fhir-db']
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  on-fhir: &fhir-service
    image: hapiproject/hapi:latest
    tty: ${DOCKER_TTY:-true}
    restart: always
    networks:
      - gateway
      - on-fhir-db
      - on-internal
    ports:
      - 8080:8080
    configs:
      - source: hapi
        target: /app/config/application.yaml
    environment:
      # NOTE: the env vars below are interpolated in to the hapi application.yaml at run time
      # If you add any env vars for other purposes, put them above this comment, to keep track of things
      <<: *fhir-db-env
      DB_PORT: 5432
      DB_HOST: on-fhir-db
      FHIR_SERVER_ADDRESS: http://localhost:8080/on/fhir # see proxy address via gateway.default.conf
  on-synthesizer: &synthesizer-service
    image: synthesizer:1.1
    tty: ${DOCKER_TTY:-true}
    restart: on-failure # reattempt until successful
    build:
      context: ./synthesizer
    networks:
      - on-internal
    environment:
      NUM_RECORDS: 100
      PT: on
      FHIR_URL: http://on-fhir:8080/fhir # in this case, resolved inside the container, with container networking
  on-aggregator: &aggregator-service
    image: aggregator:1.3
    tty: ${DOCKER_TTY:-true}
    restart: always
    build:
      context: ./aggregator
    networks:
      - gateway
      - on-internal
    ports:
      - 5000:5000
    environment:
      AGGREGATION_INTERVAL: 60
      FHIR_URL: http://on-fhir:8080/fhir # in this case, resolved inside the container, with container networking
  on-patient-browser: &patient-browser-service
    image: patient-browser:1.1
    tty: ${DOCKER_TTY:-true}
    restart: always
    build:
      context: ./patient-browser
    networks:
      - gateway
      - on-internal
    ports:
      - 80:80
    environment:
      FHIR_URL: http://localhost:8080/on/fhir/ # in this case, resolved in the host browser, not container networking, see gateway.default.conf
  on-transfer-inbound: &transfer-inbound-service
    image: node-dev:1.0
    tty: ${DOCKER_TTY:-true}
    restart: always
    build:
      context: ./node-dev-docker-env
      dockerfile: ./Dockerfile.node-dev
    volumes:
      - ./transfer-inbound:/home/node-dev/project
      - ./transfer-inbound/.env.node-dev-docker-env-overrides:/home/node-dev/project/.env
    command: npm run dev:${DOCKER_API_COMMAND:-docker} # 'docker' or 'docker-debug'
    networks:
      - gateway
      - on-internal
        # node-dev images need to reach the internet for installing packages at run time, and to surface debug servers directly.
        # For docker networking and prod-parity purposes, service-to-service communications should still go through the nginx gateway
      - host-loopback
    ports:
      - 3001:3000
      - 9231:9229 # for the node debug server, when active; see node-dev-docker-env/package.json `dev:docker-debug` script
    environment:
      EXPRESS_PORT: 3000
      DEV_IS_LOCAL_ENV: True
  on-transfer-outbound: &transfer-outbound-service
    image: node-dev:1.0
    tty: ${DOCKER_TTY:-true}
    restart: always
    build:
      context: ./node-dev-docker-env
      dockerfile: ./Dockerfile.node-dev
    volumes:
      - ./transfer-outbound:/home/node-dev/project
      - ./transfer-outbound/.env.node-dev-docker-env-overrides:/home/node-dev/project/.env
    command: npm run dev:${DOCKER_API_COMMAND:-docker} # 'docker' or 'docker-debug'
    networks:
      - gateway
      - on-internal
        # node-dev images need to reach the internet for installing packages at run time, and to surface debug servers directly.
        # For docker networking and prod-parity purposes, service-to-service communications should still go through the nginx gateway
      - host-loopback
    ports:
      - 3002:3000
      - 9232:9229 # for the node debug server, when active; see node-dev-docker-env/package.json `dev:docker-debug` script
    environment:
      EXPRESS_PORT: 3000
      DEV_IS_LOCAL_ENV: True

  bc-fhir-db:
    <<: *fhir-db-service
    networks:
      - bc-fhir-db
    volumes:
      - bc-fhir-db:/var/lib/postgresql/data
  bc-fhir:
    <<: *fhir-service
    networks:
      - gateway
      - bc-fhir-db
      - bc-internal
    ports:
      - 8080:8080
    environment:
      <<: *fhir-db-env
      DB_PORT: 5432
      DB_HOST: bc-fhir-db
      FHIR_SERVER_ADDRESS: http://localhost:8080/bc/fhir # see proxy address via gateway.default.conf
  bc-synthesizer:
    <<: *synthesizer-service
    networks:
      - bc-internal
    environment:
      NUM_RECORDS: 100
      PT: bc
      FHIR_URL: http://bc-fhir:8080/fhir # in this case, resolved inside the container, with container networking
  bc-aggregator:
    <<: *aggregator-service
    networks:
      - gateway
      - bc-internal
    environment:
      AGGREGATION_INTERVAL: 60
      FHIR_URL: http://bc-fhir:8080/fhir # in this case, resolved inside the container, with container networking
  bc-patient-browser:
    <<: *patient-browser-service
    networks:
      - gateway
      - bc-internal
    environment:
      FHIR_URL: http://localhost:8080/bc/fhir/ # in this case, resolved in the host browser, not container networking, see gateway.default.conf
  bc-transfer-inbound:
    <<: *transfer-inbound-service
    command: npm run dev # note: only opening debug ports on the ON services
    networks:
      - gateway
      - bc-internal
        # node-dev images need to reach the internet for installing packages at run time, and to surface debug servers directly.
        # For docker networking and prod-parity purposes, service-to-service communications should still go through the nginx gateway
      - host-loopback
    ports:
      - 3003:3000
  bc-transfer-outbound:
    <<: *transfer-outbound-service
    command: npm run dev # note: only opening debug ports on the ON services
    networks:
      - gateway
      - bc-internal
        # node-dev images need to reach the internet for installing packages at run time, and to surface debug servers directly.
        # For docker networking and prod-parity purposes, service-to-service communications should still go through the nginx gateway
      - host-loopback
    ports:
      - 3004:3000

  federator:
    image: node-dev:1.0
    tty: ${DOCKER_TTY:-true}
    restart: always
    build:
      context: ./node-dev-docker-env
      dockerfile: ./Dockerfile.node-dev
    volumes:
      - ./federator:/home/node-dev/project
      - ./federator/.env.node-dev-docker-env-overrides:/home/node-dev/project/.env
    command: npm run dev:${DOCKER_API_COMMAND:-docker} # 'docker' or 'docker-debug'
    networks:
      - gateway
      - federal-internal
        # node-dev images need to reach the internet for installing packages at run time, and to surface debug servers directly.
        # For docker networking and prod-parity purposes, service-to-service communications should still go through the nginx gateway
      - host-loopback
    ports:
      - 3000:3000
      - 9229:9229 # for the node debug server, when active; see node-dev-docker-env/package.json `dev:docker-debug` script
    environment:
      EXPRESS_PORT: 3000
      DEV_IS_LOCAL_ENV: True
      AGGREGATOR_URLS: 'http://gateway/on/aggregator,http://gateway/bc/aggregator'
