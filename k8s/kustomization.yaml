apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

# IIDI Application for Cobra Tenant
# All resources deploy to cobra namespace managed by platform

# Set namespace for all resources
namespace: cobra

resources:
  # BC Services
  - bc-services/hapi-fhir-server/
  - bc-services/redis-server/
  - bc-services/patient-browser/
  - bc-services/aggregation-server/
  - bc-services/bc-transfer/

  # ON Services
  - on-services/hapi-fhir-server/
  - on-services/redis-server/
  - on-services/patient-browser/
  - on-services/aggregation-server/
  - on-services/on-transfer/

  # Federal Services
  - federal-services/federator/
  - federal-services/rshiny-dashboard/

  # Demo Services
  - demo-services/demo-portal/
  - demo-services/demo-transfer-dashboard/

# Common labels applied to all resources
labels:
  - pairs:
      tenant: cobra
      app.kubernetes.io/managed-by: argocd
      client-cost-centre: "280068"
      client-vanity-name: "IIDI"
      client-apm-id: ""
    includeTemplates: true
    includeSelectors: false

# Global annotations
commonAnnotations:
  app.kubernetes.io/version: "1.0.0"
  argocd.argoproj.io/sync-options: "ServerSideApply=true"

# Image transformations - update to use Artifact Registry
images:
  # Demo Portal
  - name: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/demo-portal
    newName: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/demo-portal
    newTag: iidi-cobra-89d53d5feb2a4857284847e047cb66ec24ab2e96-1754014870

  # HAPI FHIR Server - using new image
  - name: hapiproject/hapi
    newName: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/hapi-fhir-server
    newTag: iidi-cobra-bfaaeda934d8a8c2ade3bb5391d75420c550a8f9f4ac2fdb585cc78cf91d61a7-1754081774

  # HAPI FHIR Server - also handle Artifact Registry references
  - name: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/hapi-fhir-server
    newName: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/hapi-fhir-server
    newTag: iidi-cobra-bfaaeda934d8a8c2ade3bb5391d75420c550a8f9f4ac2fdb585cc78cf91d61a7-1754081774

  # IIDI Aggregator
  - name: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/iidi-aggregator
    newName: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/iidi-aggregator
    newTag: iidi-cobra-89d53d5feb2a4857284847e047cb66ec24ab2e96-1754014871

  # IIDI Dashboard (digest-based)
  - name: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/iidi-dashboard
    newName: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/iidi-dashboard
    digest: sha256:1d6e61770f6ba00712a9f1be5c6526b8628941f530cd4c321a022d8638a66d56

  # IIDI Demo Transfer Dashboard (digest-based)
  - name: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/iidi-demo-transfer-dashboard
    newName: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/iidi-demo-transfer-dashboard
    digest: sha256:87ff53bed89d13633c8ae88032f1ab6fd67eb37ae46d8a04bbd03db6eefa03a8

  # IIDI Federator (digest-based)
  - name: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/iidi-federator
    newName: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/iidi-federator
    digest: sha256:02f49833bfee2a9b7bff9b5ff979ae5324972937d2fcf7937b39289c83d97204

  # Transfer Services (digest-based)
  - name: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/iidi-transfer-inbound
    newName: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/iidi-transfer-inbound
    digest: sha256:fc4bcd8c63c56bb9cd4dfc79e6e030c38fadcec20fbff1ab3044145766d3f795

  - name: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/iidi-transfer-outbound
    newName: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/iidi-transfer-outbound
    digest: sha256:6bcc8e118116669db9b9d9ae9a97f3c99b4aac031fc7eff03f236d6342bfca68

  # Patient Browser (digest-based)
  - name: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/patient-browser-iidi
    newName: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/patient-browser-iidi
    digest: sha256:f8628df85dd76c8f59c2d31b03b2f08dc0d258fc1825e1b7459591410656076a

  # Synthetic Data (digest-based)
  - name: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/synthetic-data
    newName: northamerica-northeast1-docker.pkg.dev/gcdm022b-cobra/iidi/synthetic-data
    digest: sha256:cd50afbbf33f1be554ce3aee71647f7868b885183bd0573935699aab7bf0b5d9

# Patches to apply - Strategic merge to consolidate configurations
patches:
  # Add service account to all deployments
  - target:
      kind: Deployment
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: not-important
      spec:
        template:
          spec:
            serviceAccountName: cobra-app-sa

  # Add busybox sidecar to all deployments for debugging
  - target:
      kind: Deployment
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: not-important
      spec:
        template:
          spec:
            containers:
              - name: busybox-sidecar
                image: radial/busyboxplus:curl
                command: ["tail", "-f", "/dev/null"]
                stdin: true
                tty: true
                resources:
                  requests:
                    cpu: 50m
                    memory: 64Mi
                  limits:
                    cpu: 200m
                    memory: 200Mi

  # Redis BC - Resources only
  - target:
      kind: Deployment
      name: redis-bc
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: redis-bc
      spec:
        template:
          spec:
            containers:
            - name: redis
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 500m
                  memory: 512Mi

  # Redis ON - Resources only
  - target:
      kind: Deployment
      name: redis-on
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: redis-on
      spec:
        template:
          spec:
            containers:
            - name: redis
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 500m
                  memory: 512Mi

  # HAPI FHIR BC - Combined: resources + gateway + scaling + topology
  - target:
      kind: Deployment
      name: hapi-fhir-server-bc
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: hapi-fhir-server-bc
      spec:
        replicas: 1
        revisionHistoryLimit: 2
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxSurge: 25%
            maxUnavailable: 0
        minReadySeconds: 5
        template:
          metadata:
            labels:
              expose-to-gateway: "true"
              app.kubernetes.io/name: hapi-fhir-server
          spec:
            containers:
            - name: hapi-fhir-server-bc
              resources:
                requests:
                  cpu: 500m
                  memory: 2Gi
                limits:
                  cpu: 2000m
                  memory: 4Gi
              startupProbe:
                httpGet:
                  path: /fhir/metadata
                  port: 8080
                initialDelaySeconds: 60
                periodSeconds: 10
                timeoutSeconds: 5
                failureThreshold: 30
              readinessProbe:
                httpGet:
                  path: /fhir/metadata
                  port: 8080
                periodSeconds: 5
                timeoutSeconds: 3
                failureThreshold: 3
              livenessProbe:
                httpGet:
                  path: /fhir/metadata
                  port: 8080
                initialDelaySeconds: 15
                periodSeconds: 10
                timeoutSeconds: 3
                failureThreshold: 3
            topologySpreadConstraints:
              - maxSkew: 1
                topologyKey: topology.kubernetes.io/zone
                whenUnsatisfiable: ScheduleAnyway
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: hapi-fhir-server

  # HAPI FHIR ON - Combined: resources + gateway + scaling + topology
  - target:
      kind: Deployment
      name: hapi-fhir-server-on
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: hapi-fhir-server-on
      spec:
        replicas: 1
        revisionHistoryLimit: 2
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxSurge: 25%
            maxUnavailable: 0
        minReadySeconds: 5
        template:
          metadata:
            labels:
              expose-to-gateway: "true"
              app.kubernetes.io/name: hapi-fhir-server
          spec:
            containers:
            - name: hapi-fhir-server-on
              resources:
                requests:
                  cpu: 500m
                  memory: 2Gi
                limits:
                  cpu: 2000m
                  memory: 4Gi
              startupProbe:
                httpGet:
                  path: /fhir/metadata
                  port: 8080
                initialDelaySeconds: 60
                periodSeconds: 10
                timeoutSeconds: 5
                failureThreshold: 30 
              readinessProbe:
                httpGet:
                  path: /fhir/metadata
                  port: 8080
                periodSeconds: 5
                timeoutSeconds: 5
                failureThreshold: 5
              livenessProbe:
                httpGet:
                  path: /fhir/metadata
                  port: 8080
                initialDelaySeconds: 15
                periodSeconds: 10
                timeoutSeconds: 3
                failureThreshold: 3
            topologySpreadConstraints:
              - maxSkew: 1
                topologyKey: topology.kubernetes.io/zone
                whenUnsatisfiable: ScheduleAnyway
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: hapi-fhir-server

  # Transfer services - Resources + readiness probes + gateway exposure
  - target:
      kind: Deployment
      name: transfer-inbound-bc
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: transfer-inbound-bc
      spec:
        template:
          metadata:
            labels:
              expose-to-gateway: "true"
          spec:
            containers:
            - name: transfer-inbound-bc
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 500m
                  memory: 512Mi
              readinessProbe:
                tcpSocket:
                  port: 3000
                periodSeconds: 5
                timeoutSeconds: 3
                failureThreshold: 3

  - target:
      kind: Deployment
      name: transfer-outbound-bc
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: transfer-outbound-bc
      spec:
        template:
          metadata:
            labels:
              expose-to-gateway: "true"
          spec:
            containers:
            - name: transfer-outbound-bc
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 500m
                  memory: 512Mi
              readinessProbe:
                tcpSocket:
                  port: 3000
                periodSeconds: 5
                timeoutSeconds: 3
                failureThreshold: 3

  - target:
      kind: Deployment
      name: transfer-inbound-on
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: transfer-inbound-on
      spec:
        template:
          metadata:
            labels:
              expose-to-gateway: "true"
          spec:
            containers:
            - name: transfer-inbound-on
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 500m
                  memory: 512Mi
              readinessProbe:
                tcpSocket:
                  port: 3000
                periodSeconds: 5
                timeoutSeconds: 3
                failureThreshold: 3

  - target:
      kind: Deployment
      name: transfer-outbound-on
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: transfer-outbound-on
      spec:
        template:
          metadata:
            labels:
              expose-to-gateway: "true"
          spec:
            containers:
            - name: transfer-outbound-on
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 500m
                  memory: 512Mi
              readinessProbe:
                tcpSocket:
                  port: 3000
                periodSeconds: 5
                timeoutSeconds: 3
                failureThreshold: 3

  # Aggregation BC - Combined: resources + gateway + scaling + topology
  - target:
      kind: Deployment
      name: aggregation-server-bc-deployment
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: aggregation-server-bc-deployment
      spec:
        replicas: 1
        template:
          metadata:
            labels:
              expose-to-gateway: "true"
              app.kubernetes.io/name: aggregation-server
          spec:
            containers:
            - name: aggregation-server-bc
              resources:
                requests:
                  cpu: 200m
                  memory: 512Mi
                limits:
                  cpu: 1000m
                  memory: 2Gi
              readinessProbe:
                httpGet:
                  path: /health
                  port: 5000
                periodSeconds: 5
                timeoutSeconds: 3
                failureThreshold: 3
            topologySpreadConstraints:
              - maxSkew: 1
                topologyKey: topology.kubernetes.io/zone
                whenUnsatisfiable: ScheduleAnyway
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: aggregation-server

  # Aggregation ON - Combined: resources + gateway + scaling + topology
  - target:
      kind: Deployment
      name: aggregation-server-on-deployment
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: aggregation-server-on-deployment
      spec:
        replicas: 1
        template:
          metadata:
            labels:
              expose-to-gateway: "true"
              app.kubernetes.io/name: aggregation-server
          spec:
            containers:
            - name: aggregation-server-on
              resources:
                requests:
                  cpu: 200m
                  memory: 512Mi
                limits:
                  cpu: 1000m
                  memory: 2Gi
              readinessProbe:
                httpGet:
                  path: /health
                  port: 5000
                periodSeconds: 5
                timeoutSeconds: 3
                failureThreshold: 3
            topologySpreadConstraints:
              - maxSkew: 1
                topologyKey: topology.kubernetes.io/zone
                whenUnsatisfiable: ScheduleAnyway
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: aggregation-server

  # Patient Browser BC - Combined: resources + gateway + scaling + topology + readiness probe
  - target:
      kind: Deployment
      name: patient-browser-bc
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: patient-browser-bc
      spec:
        replicas: 1
        revisionHistoryLimit: 2
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxSurge: 25%
            maxUnavailable: 0
        minReadySeconds: 5
        template:
          metadata:
            labels:
              expose-to-gateway: "true"
              app.kubernetes.io/name: patient-browser
          spec:
            containers:
            - name: patient-browser-bc
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 500m
                  memory: 1Gi
              readinessProbe:
                httpGet:
                  path: /
                  port: 80
                periodSeconds: 5
                timeoutSeconds: 3
                failureThreshold: 3
              startupProbe:
                httpGet:
                  path: /
                  port: 80
                initialDelaySeconds: 60
                periodSeconds: 10
                timeoutSeconds: 5
                failureThreshold: 30
              livenessProbe:
                httpGet:
                  path: /
                  port: 80
                initialDelaySeconds: 15
                periodSeconds: 10
                timeoutSeconds: 3
                failureThreshold: 3
            topologySpreadConstraints:
              - maxSkew: 1
                topologyKey: topology.kubernetes.io/zone
                whenUnsatisfiable: ScheduleAnyway
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: patient-browser

  # Patient Browser ON - Combined: resources + gateway + scaling + topology + readiness probe
  - target:
      kind: Deployment
      name: patient-browser-on
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: patient-browser-on
      spec:
        replicas: 1
        revisionHistoryLimit: 2
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxSurge: 25%
            maxUnavailable: 0
        minReadySeconds: 5
        template:
          metadata:
            labels:
              expose-to-gateway: "true"
              app.kubernetes.io/name: patient-browser
          spec:
            containers:
            - name: patient-browser-on
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 500m
                  memory: 1Gi
              startupProbe:
                httpGet:
                  path: /
                  port: 80
                initialDelaySeconds: 60
                periodSeconds: 10
                timeoutSeconds: 5
                failureThreshold: 30
              readinessProbe:
                httpGet:
                  path: /
                  port: 80
                periodSeconds: 5
                timeoutSeconds: 3
                failureThreshold: 3
              livenessProbe:
                httpGet:
                  path: /
                  port: 80
                initialDelaySeconds: 15
                periodSeconds: 10
                timeoutSeconds: 3
                failureThreshold: 3
            topologySpreadConstraints:
              - maxSkew: 1
                topologyKey: topology.kubernetes.io/zone
                whenUnsatisfiable: ScheduleAnyway
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: patient-browser

  # Demo Portal - Combined: resources + gateway + scaling + topology
  - target:
      kind: Deployment
      name: demo-portal
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: demo-portal
      spec:
        replicas: 1
        template:
          metadata:
            labels:
              expose-to-gateway: "true"
              app.kubernetes.io/name: demo-portal
          spec:
            containers:
            - name: demo-portal
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 500m
                  memory: 1Gi
            topologySpreadConstraints:
              - maxSkew: 1
                topologyKey: topology.kubernetes.io/zone
                whenUnsatisfiable: ScheduleAnyway
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: demo-portal

  # Demo Transfer Dashboard - Combined: resources + gateway + scaling + topology
  - target:
      kind: Deployment
      name: demo-transfer-dashboard
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: demo-transfer-dashboard
      spec:
        replicas: 1
        template:
          metadata:
            labels:
              expose-to-gateway: "true"
              app.kubernetes.io/name: demo-transfer-dashboard
          spec:
            containers:
            - name: demo-transfer-dashboard
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 500m
                  memory: 1Gi
            topologySpreadConstraints:
              - maxSkew: 1
                topologyKey: topology.kubernetes.io/zone
                whenUnsatisfiable: ScheduleAnyway
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: demo-transfer-dashboard

  # Federator - Combined: resources + gateway + scaling + topology
  - target:
      kind: Deployment
      name: federator-deployment
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: federator-deployment
      spec:
        replicas: 1
        template:
          metadata:
            labels:
              expose-to-gateway: "true"
              app.kubernetes.io/name: federator
          spec:
            containers:
            - name: federator
              resources:
                requests:
                  cpu: 200m
                  memory: 512Mi
                limits:
                  cpu: 1000m
                  memory: 2Gi
            topologySpreadConstraints:
              - maxSkew: 1
                topologyKey: topology.kubernetes.io/zone
                whenUnsatisfiable: ScheduleAnyway
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: federator

  # RShiny Dashboard - Combined: resources + gateway + scaling + topology
  - target:
      kind: Deployment
      name: rshiny-dashboard-deployment
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: rshiny-dashboard-deployment
      spec:
        replicas: 1
        template:
          metadata:
            labels:
              expose-to-gateway: "true"
              app.kubernetes.io/name: rshiny-dashboard
          spec:
            containers:
            - name: rshiny-dashboard
              resources:
                requests:
                  cpu: 200m
                  memory: 512Mi
                limits:
                  cpu: 1000m
                  memory: 2Gi
            topologySpreadConstraints:
              - maxSkew: 1
                topologyKey: topology.kubernetes.io/zone
                whenUnsatisfiable: ScheduleAnyway
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: rshiny-dashboard

  # CRITICAL PORT FIXES - Patient Browser Services must target port 8080
  - target:
      kind: Service
      name: patient-browser-bc-svc
    patch: |-
      apiVersion: v1
      kind: Service
      metadata:
        name: patient-browser-bc-svc
        annotations:
          argocd.argoproj.io/sync-wave: "40"
      spec:
        ports:
        - name: http
          port: 8080
          targetPort: 8080
          protocol: TCP

  - target:
      kind: Service
      name: patient-browser-on-svc
    patch: |-
      apiVersion: v1
      kind: Service
      metadata:
        name: patient-browser-on-svc
        annotations:
          argocd.argoproj.io/sync-wave: "40"
      spec:
        ports:
        - name: http
          port: 8080
          targetPort: 8080
          protocol: TCP

  # SYNC-WAVE CONSISTENCY - Transfer Services
  - target:
      kind: Service
      name: transfer-inbound-on-svc
    patch: |-
      apiVersion: v1
      kind: Service
      metadata:
        name: transfer-inbound-on-svc
        annotations:
          argocd.argoproj.io/sync-wave: "40"

  - target:
      kind: Service
      name: transfer-outbound-on-svc
    patch: |-
      apiVersion: v1
      kind: Service
      metadata:
        name: transfer-outbound-on-svc
        annotations:
          argocd.argoproj.io/sync-wave: "40"

  # ENVIRONMENT VARIABLE CONSISTENCY - Transfer Outbound ON
  - target:
      kind: Deployment
      name: transfer-outbound-on
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: transfer-outbound-on
      spec:
        template:
          spec:
            containers:
            - name: transfer-outbound-on
              env:
              - name: EXPRESS_PORT
                value: "3000"
              - name: DEV_IS_LOCAL_ENV
                value: "false"
              - name: REDIS_HOST
                value: "redis-on-svc.cobra.svc.cluster.local"
              - name: FHIR_URL
                value: "http://hapi-fhir-on-svc.cobra.svc.cluster.local:8080/fhir"
              - name: OWN_TRANSFER_CODE
                value: "ON"
              - name: INBOUND_TRANSFER_SERVICES_BY_TRANSFER_CODE
                value: '{ "BC": "http://transfer-inbound-bc-svc.cobra.svc.cluster.local:3000" }'
              - name: REDIS_PORT
                value: "6379"
              - name: TRANSFER_DASHBOARD_ORIGINS
                value: "https://demo-transfer-dashboard.iidi.beta.phac.gc.ca/,http://localhost:8080,http://localhost:3000,http://localhost:3005"

  # STANDARDIZED LABELS - Aggregation BC
  - target:
      kind: Deployment
      name: aggregation-server-bc-deployment
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: aggregation-server-bc-deployment
        labels:
          app.kubernetes.io/name: aggregation-server-bc
          app.kubernetes.io/component: bc-services
          app.kubernetes.io/part-of: iidi-tech

  - target:
      kind: Service
      name: aggregation-server-bc-svc
    patch: |-
      apiVersion: v1
      kind: Service
      metadata:
        name: aggregation-server-bc-svc
        labels:
          app.kubernetes.io/name: aggregation-server-bc
          app.kubernetes.io/component: bc-services
          app.kubernetes.io/part-of: iidi-tech

  # GOVERNANCE LABELS - HAPI FHIR ON
  - target:
      kind: Deployment
      name: hapi-fhir-server-on
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: hapi-fhir-server-on
        labels:
          gc.ca/data-classification: unclassified
          gc.ca/environment: dev
          gc.ca/tier: tier3
          tenant: cobra
          app.kubernetes.io/part-of: iidi
          app.kubernetes.io/component: fhir-server
          province: on
          expose-to-gateway: "true"

  - target:
      kind: Service
      name: hapi-fhir-on-svc
    patch: |-
      apiVersion: v1
      kind: Service
      metadata:
        name: hapi-fhir-on-svc
        labels:
          gc.ca/data-classification: unclassified
          gc.ca/environment: dev
          gc.ca/tier: tier3
          tenant: cobra
          app.kubernetes.io/part-of: iidi
          app.kubernetes.io/component: fhir-server
          province: on
          expose-to-gateway: "true"

  # HAPI FHIR Services: enforce port 8080 consistency
  - target:
      kind: Service
      name: hapi-fhir-bc-svc
    patch: |-
      apiVersion: v1
      kind: Service
      metadata:
        name: hapi-fhir-bc-svc
        annotations:
          argocd.argoproj.io/sync-wave: "40"
      spec:
        ports:
        - name: http
          port: 8080
          targetPort: 8080
          protocol: TCP

  - target:
      kind: Service
      name: hapi-fhir-on-svc
    patch: |-
      apiVersion: v1
      kind: Service
      metadata:
        name: hapi-fhir-on-svc
        annotations:
          argocd.argoproj.io/sync-wave: "40"
      spec:
        ports:
        - name: http
          port: 8080
          targetPort: 8080
          protocol: TCP

  # Transfer Services: BC sync-wave consistency
  - target:
      kind: Service
      name: transfer-inbound-bc-svc
    patch: |-
      apiVersion: v1
      kind: Service
      metadata:
        name: transfer-inbound-bc-svc
        annotations:
          argocd.argoproj.io/sync-wave: "40"

  - target:
      kind: Service
      name: transfer-outbound-bc-svc
    patch: |-
      apiVersion: v1
      kind: Service
      metadata:
        name: transfer-outbound-bc-svc
        annotations:
          argocd.argoproj.io/sync-wave: "40"
